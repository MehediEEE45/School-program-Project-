# Arduino ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø COM ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶Ø‡¶¶‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã future ‡¶è)
port = "COM4"

'''
# PyFirmata ‡¶¶‡¶ø‡ßü‡ßá Arduino ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶®‡ßá‡¶ì‡ßü‡¶æ (‡¶ï‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶è‡¶ñ‡¶®)
import pyfirmata
board = pyfirmata.Arduino(port)  # ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú
servo_pinX = board.get_pin('d:9:s')  # pin 9 - X servo
servo_pinY = board.get_pin('d:10:s')  # pin 10 - Y servo
'''

# FaceDetector ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá ‡¶´‡ßá‡¶∏ ‡¶°‡¶ø‡¶ü‡ßá‡¶ï‡¶∂‡¶® ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
detector = FaceDetector()

# ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡ßã ‡¶è‡¶∞ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶™‡¶ú‡¶ø‡¶∂‡¶® (‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶Æ‡¶æ‡¶ù‡¶ñ‡¶æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ)
servoPos = [90, 90]

# ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶¨‡ßç‡¶∞‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤
ref_face_size = None  # ‡¶´‡ßá‡¶∏ ‡¶∏‡¶æ‡¶á‡¶ú ‡¶Ø‡¶ñ‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶¨‡ßç‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü
ref_distance_cm = 50  # ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡ßá‡¶á ‡¶¶‡ßÇ‡¶∞‡¶§‡ßç‡¶¨‡ßá ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶¨‡ßç‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá‡¶õ‡ßá‡¶® (‡¶Ø‡ßá‡¶Æ‡¶® ‡ß´‡ß¶ ‡¶∏‡ßá‡¶Æ‡¶ø)

# ‡¶ï‡¶®‡¶∏‡ßã‡¶≤‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶∂‡¶® ‡¶¶‡ßá‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
print("‚ñ∂ Stand at 50cm and press 'c' to calibrate.")
print("‚ñ∂ Press 'q' to quit.")

# ‡¶Æ‡ßÇ‡¶≤ ‡¶≤‡ßÅ‡¶™ ‡¶∂‡ßÅ‡¶∞‡ßÅ
while True:
    success, img = cap.read()  # ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶∞‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡ßç‡¶∞‡ßá‡¶Æ ‡¶™‡ßú‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    if not success:
        print("‚ùå Failed to grab frame")  # ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶∞‡¶æ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ
        break

    # ‡¶´‡ßá‡¶∏ ‡¶°‡¶ø‡¶ü‡ßá‡¶ï‡¶∂‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá (draw=False ‡¶Æ‡¶æ‡¶®‡ßá ‡¶ö‡ßá‡¶π‡¶æ‡¶∞‡¶æ‡ßü ‡¶¨‡¶ï‡ßç‡¶∏ ‡¶®‡¶æ ‡¶Ü‡¶Å‡¶ï‡¶æ)
    img, bboxs = detector.findFaces(img, draw=False)

    # ‡¶´‡ßç‡¶∞‡ßá‡¶Æ‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ù‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶≤‡¶æ‡¶á‡¶® ‡¶Ü‡¶Å‡¶ï‡¶æ
    cv2.line(img, (ws // 2, 0), (ws // 2, hs), (150, 150, 150), 1)  # vertical center
    cv2.line(img, (0, hs // 2), (ws, hs // 2), (150, 150, 150), 1)  # horizontal center

    # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶´‡ßá‡¶∏ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü
    if bboxs:
        x, y, w, h = bboxs[0]["bbox"]  # ‡¶Æ‡ßÅ‡¶ñ‡ßá‡¶∞ ‡¶¨‡¶æ‡¶â‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶¨‡¶ï‡ßç‡¶∏
        cx, cy = bboxs[0]["center"]  # ‡¶Æ‡ßÅ‡¶ñ‡ßá‡¶∞ ‡¶∏‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü
        face_size = (w + h) / 2  # ‡¶Æ‡ßÅ‡¶ñ‡ßá‡¶∞ approximate ‡¶Ü‡¶ï‡¶æ‡¶∞ (width+height)/2

        print(f"‚úî Face at ({cx:.1f}, {cy:.1f}) ‚Äî size: {face_size:.1f} px")

        # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶¨‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶Ü‡¶ó‡ßá ‡¶ï‡¶∞‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¶‡ßÇ‡¶∞‡¶§‡ßç‡¶¨ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
        if ref_face_size is not None and face_size > 0:
            estimated_distance = (ref_face_size * ref_distance_cm) / face_size  # ‡¶∏‡¶∞‡¶≤ ‡¶∞‡ßÅ‡¶≤
            print(f"üìè Distance: {estimated_distance:.2f} cm")
        else:
            estimated_distance = None
            print("‚ÑπÔ∏è Press 'c' to calibrate")  # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶Æ‡¶®‡ßá ‡¶ï‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶¨‡ßç‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá

        # ‡¶Æ‡ßÅ‡¶ñ‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®‡¶ï‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡ßã ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ó‡ßá‡¶≤‡ßá ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
        servoX = np.interp(cx, [0, ws], [0, 180])  # cx ‡¶ï‡ßá 0-180 ‡¶§‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞
        servoY = np.interp(cy, [0, hs], [180, 0])  # cy ‡¶ï‡ßá ‡¶á‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡ßá servo ‡¶§‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞

        # ‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶ó‡ßá‡¶≤‡ßá ‡¶ï‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™ ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ
        servoX = max(0, min(180, servoX))
        servoY = max(0, min(180, servoY))

        '''
        # ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡ßã ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤ ‚Äî ‡¶Ø‡¶¶‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶ì ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶á ‡¶Ö‡¶Ç‡¶∂ ‡¶Ü‡¶®‡¶ï‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßã
        servoPos[0] = servoX
        servoPos[1] = servoY
        servo_pinX.write(servoPos[0])
        servo_pinY.write(servoPos[1])
        '''

        # ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ (‡¶≤‡¶æ‡¶≤ ‡¶ó‡ßã‡¶≤ ‡¶ö‡¶ø‡¶π‡ßç‡¶®)
        cv2.circle(img, (int(cx), int(cy)), 80, (0, 0, 255), 2)
        cv2.circle(img, (int(cx), int(cy)), 15, (0, 0, 255), cv2.FILLED)

        # ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶á‡¶Æ‡ßá‡¶ú‡ßá
        cv2.putText(img, f'Servo X: {int(servoX)}¬∞', (50, 50),
                    cv2.FONT_HERSHEY_PLAIN, 2, (255, 0, 0), 2)
        cv2.putText(img, f'Servo Y: {int(servoY)}¬∞', (50, 100),
                    cv2.FONT_HERSHEY_PLAIN, 2, (255, 0, 0), 2)

        # ‡¶¶‡ßÇ‡¶∞‡¶§‡ßç‡¶¨ ‡¶Ø‡¶¶‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶§‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
        if estimated_distance is not None:
            cv2.putText(img, f'Distance: {estimated_distance:.2f} cm', (50, 150),
                        cv2.FONT_HERSHEY_PLAIN, 2, (0, 150, 0), 2)
        else:
            cv2.putText(img, f'Distance: --', (50, 150),
                        cv2.FONT_HERSHEY_PLAIN, 2, (0, 0, 200), 2)

        # ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶≤‡¶ï ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
        cv2.putText(img, "TARGET LOCKED", (850, 50),
                    cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 255), 3)

    else:
        # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßÅ‡¶ñ ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü
        print("‚ùó No face detected")
        cv2.putText(img, "NO TARGET", (880, 50),
                    cv2.FONT_HERSHEY_PLAIN, 3, (0, 0, 255), 3)
        cv2.circle(img, (ws // 2, hs // 2), 80, (0, 0, 255), 2)
        cv2.circle(img, (ws // 2, hs // 2), 15, (0, 0, 255), cv2.FILLED)

    # ‡¶∏‡¶¨‡¶∂‡ßá‡¶∑‡ßá ‡¶´‡ßç‡¶∞‡ßá‡¶Æ‡¶ü‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    cv2.imshow("Face Tracker & Distance", img)

    # ‡¶ï‡ßÄ ‡¶™‡ßç‡¶∞‡ßá‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):  # 'q' ‡¶ö‡¶æ‡¶™‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶¨‡ßá
        break
    elif key == ord('c') and bboxs:  # 'c' ‡¶ö‡¶æ‡¶™‡¶≤‡ßá ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶¨‡ßç‡¶∞‡ßá‡¶ü ‡¶π‡¶¨‡ßá
        ref_face_size = face_size
        print(f"‚úÖ Calibrated! Reference face size: {ref_face_size:.1f} px at {ref_distance_cm} cm")

# ‡¶∏‡¶¨ ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶õ‡¶æ‡ßú ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ
cap.release()
cv2.destroyAllWindows()
'''
board.exit()
'''
